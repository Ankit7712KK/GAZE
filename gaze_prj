# For Positions
import cv2 as cv
import numpy as np
import mediapipe as mp
import math

mp_face_mesh = mp.solutions.face_mesh  # calling model by creating object

LEFT_EYE = [362, 382, 381, 380, 374, 390, 249, 263, 466, 388, 387, 386, 385, 398]
RIGHT_EYE = [33, 7, 163, 144, 145, 153, 154, 155, 133, 173, 157, 158, 159, 160, 161, 246]

RIGHT_IRIS = [474, 475, 476, 477]
LEFT_IRIS = [469, 470, 471, 472]
L_H_LEFT = [33]  # right eye most landmark
L_H_RIGHT = [133]  # right eye left most landmark
R_H_LEFT = [362]  # left eye right most landmark
R_H_RIGHT = [263]  # left eye left most landmark

CEF_COUNTER = 0
TOTAL_BLINKS = 0
CLOSED_EYES_FRAME = 3


def euclidean_distance(point1, point2):
    x1, y1 = point1.ravel()
    x2, y2 = point2.ravel()
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return distance


def blinking(img, landmaks, right_indices, left_indices):
    # Right eye
    # horizontal line
    rh_right = landmaks[right_indices[0]]
    rh_left = landmaks[right_indices[8]]

    # vertical lines
    rv_top = landmaks[right_indices[12]]
    rv_bottom = landmaks[right_indices[14]]

    # Left eye
    # horizontal line
    lh_right = landmaks[left_indices[0]]
    lh_left = landmaks[left_indices[8]]

    # vertical line
    lv_top = landmaks[left_indices[12]]
    lv_bottom = landmaks[left_indices[4]]

    rhDistance = euclidean_distance(rh_right, rh_left)
    rvDistance = euclidean_distance(rv_top, rv_bottom)

    lvDistance = euclidean_distance(lv_top, lv_bottom)
    lhDistance = euclidean_distance(lh_right, lh_left)

    reRatio = rhDistance / rvDistance
    leRation = lhDistance / lvDistance

    ratio = (reRatio + leRation) / 2
    return ratio


def iris_position_right(iris_center, right_point, left_point):
    center_to_right_dist = euclidean_distance(iris_center, right_point)
    total_distance = euclidean_distance(right_point, left_point)
    ratio = center_to_right_dist / total_distance
    iris_position = ""
    # if ratio<=0.42:
    #     iris_position = "right"
    # elif 0.42>=ratio <=0.57:
    #     iris_position="center"
    # else:
    #     iris_position="left"
    #
    return ratio


def iris_position_left(iris_center, right_point, left_point):
    center_to_left_dist = euclidean_distance(iris_center, left_point)
    total_distance = euclidean_distance(left_point, right_point)
    ratio = center_to_left_dist / total_distance
    iris_position = ""
    if 0.54<=ratio<=0.63:
        iris_position="center"
    elif 0.63<ratio:
        iris_position="left"
    else:
        iris_position="right"


    #

    return iris_position,ratio


cap = cv.VideoCapture(0)
with mp_face_mesh.FaceMesh(max_num_faces=1,
                           refine_landmarks=True,  # crucial for iris detection
                           min_detection_confidence=0.5,
                           min_tracking_confidence=0.5
                           ) as face_mesh:
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frame = cv.flip(frame, 1)
        rgb_frame = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
        img_h, img_w = frame.shape[:2]
        results = face_mesh.process(rgb_frame)
        if results.multi_face_landmarks:
            # "#print(results.multi_face_landmarks[0].landmark)"
            mesh_points = np.array(
                [np.multiply([p.x, p.y], [img_w, img_h]).astype(int) for p in results.multi_face_landmarks[0].landmark])
            # print(mesh_points.shape)
            # cv.polylines(frame,[mesh_points[LEFT_IRIS]],True,(0,255,0),1,cv.LINE_AA)
            # cv.polylines(frame, [mesh_points[RIGHT_IRIS]], True, (0, 255, 0), 1, cv.LINE_AA)

            (l_cx, l_cy), l_radius = cv.minEnclosingCircle(mesh_points[LEFT_IRIS])
            (r_cx, r_cy), r_radius = cv.minEnclosingCircle(mesh_points[RIGHT_IRIS])
            center_left = np.array([l_cx, l_cy], dtype=np.int32)
            center_right = np.array([r_cx, r_cy], dtype=np.int32)

            # cv.circle(frame, center_left, int(l_radius), (255, 0, 255), 1, cv.LINE_AA)
            # cv.circle(frame, center_right, int(r_radius), (255, 0, 255), 1, cv.LINE_AA)

            # For Right Eye
            # cv.circle(frame, mesh_points[R_H_RIGHT][0], 3, (255, 255, 255), -1, cv.LINE_AA)
            # cv.circle(frame, mesh_points[R_H_LEFT][0], 3, (0, 255, 255), -1, cv.LINE_AA)

            # For Left Eye
            # cv.circle(frame, mesh_points[L_H_RIGHT][0], 3, (255, 255, 255), -1, cv.LINE_AA)
            # cv.circle(frame, mesh_points[L_H_LEFT][0], 3, (0, 255, 255), -1, cv.LINE_AA)

            # ratio_R = iris_position_right(
            #     center_right, mesh_points[R_H_RIGHT], mesh_points[R_H_LEFT][0])
            iris_pos,ratio_L = iris_position_left(
                center_left, mesh_points[L_H_LEFT], mesh_points[L_H_RIGHT][0])

            # average = (ratio_L + ratio_R) / 2
            cv.putText(frame, iris_pos, (50, 210), cv.FONT_HERSHEY_PLAIN, 5, (255, 0, 0), 3)
            cv.putText(frame, str(ratio_L), (50, 320), cv.FONT_HERSHEY_PLAIN, 5, (255, 0, 0), 3)
            # iris_pos = ""
            # if 1.07 <= average <= 1.10:
            #     iris_pos = "LEFT"
            # # elif 0.08 <= average <= 1.12:
            # #     iris_pos = "Left"
            # # else:
            # #     iris_pos="Right"
            # #
            # cv.putText(frame, iris_pos, (50, 200), cv.FONT_HERSHEY_PLAIN, 5, (255, 0, 0), 3)
            # #
            # For Blinking...
            ratio_blink = blinking(frame, mesh_points, RIGHT_EYE, LEFT_EYE)
            if ratio_blink >= 3.9:
                TOTAL_BLINKS = (TOTAL_BLINKS + 1)
                cv.putText(frame, 'Blinking', (50, 390), cv.FONT_HERSHEY_PLAIN, 5, (0, 0, 255), 5)
            cv.putText(frame, str(ratio_blink), (1200, 470), cv.FONT_HERSHEY_PLAIN, 4,
                       (0, 255, 255), 4)
            cv.putText(frame, 'Total BLinking :' + str(TOTAL_BLINKS), (1200, 270), cv.FONT_HERSHEY_PLAIN, 4,
                       (0, 255, 255), 4)

        cv.imshow('Mediapipe', frame)
        key = cv.waitKey(1)
        if key == 27:
            break
cap.release()
cv.destroyAllWindows()
